import groovy.xml.StreamingMarkupBuilder

apply plugin: 'com.android.application'

//auto increment of version
Properties versionProps = new Properties()
def versionPropsFile = file('version.properties')
if (versionPropsFile.exists())
    versionProps.load(new FileInputStream(versionPropsFile))
def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
versionProps['VERSION_CODE'] = code.toString()
versionProps.store(versionPropsFile.newWriter(), null)
//--- end of auto increment of version ---

//build timestamp
task updateBuildTimestamp {
    def builder = new StreamingMarkupBuilder()
    builder.encoding = "UTF-8"
    //
    def now = Calendar.getInstance(TimeZone.getTimeZone("UTC"))
    def timestamp = now.format("yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
    def xml = {
        mkp.xmlDeclaration()
        resources() {
            item("type": "string", "name": "buildDate", "$timestamp")
        }
    }
    def writer = new FileWriter("app/src/main/res/values/version.xml")
    writer << builder.bind(xml)
    //
}
//--- build timestamp ---

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "co.greladesign.hiraganakatakanatester"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode code
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    maven {
        url  "https://dl.bintray.com/ionic-team/capacitor"
    }
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation project(':capacitor-android')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.warn("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}